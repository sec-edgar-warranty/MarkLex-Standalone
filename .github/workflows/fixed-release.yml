name: Fixed Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build-linux:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Setup Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        # Install Qt6 system dependencies for Ubuntu 22.04
        sudo apt-get install -y \
          libegl1 \
          libgl1 \
          libxkbcommon-x11-0 \
          libxcb-icccm4 \
          libxcb-image0 \
          libxcb-keysyms1 \
          libxcb-randr0 \
          libxcb-render-util0 \
          libxcb-xinerama0 \
          libxcb-xfixes0 \
          libxcb-shape0 \
          libglib2.0-0 \
          libfontconfig1 \
          libxcb1 \
          libxcb-glx0 \
          libxcb-xkb1 \
          libxkbcommon0 \
          libdbus-1-3 \
          libasound2
        echo "✅ System dependencies installed"
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PyQt6==6.8.0 PyQt6-sip==13.8.0
        pip install pandas numpy gensim nltk openpyxl scikit-learn scipy requests tqdm GitPython
        pip install PyInstaller==6.11.1
        
    - name: Test PyQt6 in headless mode
      run: |
        export QT_QPA_PLATFORM=offscreen
        export DISPLAY=:99
        python -c "import os; os.environ['QT_QPA_PLATFORM'] = 'offscreen'; from PyQt6.QtWidgets import QApplication; app = QApplication([]); print('✅ PyQt6 GUI works in headless mode'); app.quit()"
        
    - name: Build Linux executable
      run: |
        export QT_QPA_PLATFORM=offscreen
        pyinstaller \
          --noconfirm \
          --onefile \
          --add-data "src:src" \
          --hidden-import "src.main_window" \
          --hidden-import "src.widgets.welcome_widget" \
          --hidden-import "src.widgets.setup_widget" \
          --hidden-import "src.widgets.lexicon_widget" \
          --hidden-import "src.widgets.analysis_widget" \
          --hidden-import "src.models.embedding_manager" \
          --hidden-import "src.models.text_processor" \
          --hidden-import "src.models.lexicon_manager" \
          --hidden-import "src.utils.app_dirs" \
          --hidden-import "src.styles.modern_style" \
          main.py
        cd dist && tar -czf MarkLex-Linux-x86_64.tar.gz main
        
    - name: Upload Linux build
      uses: actions/upload-artifact@v3
      with:
        name: linux-build
        path: dist/MarkLex-Linux-x86_64.tar.gz

  build-windows:
    runs-on: windows-2022
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Setup Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PyQt6==6.8.0 PyQt6-sip==13.8.0
        pip install pandas numpy gensim nltk openpyxl scikit-learn scipy requests tqdm GitPython
        pip install PyInstaller==6.11.1
        
    - name: Build Windows executable
      run: |
        pyinstaller --noconfirm --onefile --windowed --add-data "src;src" --hidden-import "src.main_window" --hidden-import "src.widgets.welcome_widget" --hidden-import "src.widgets.setup_widget" --hidden-import "src.widgets.lexicon_widget" --hidden-import "src.widgets.analysis_widget" --hidden-import "src.models.embedding_manager" --hidden-import "src.models.text_processor" --hidden-import "src.models.lexicon_manager" --hidden-import "src.utils.app_dirs" --hidden-import "src.styles.modern_style" main.py
        cd dist && powershell Compress-Archive -Path main.exe -DestinationPath MarkLex-Windows-x86_64.zip
        
    - name: Upload Windows build
      uses: actions/upload-artifact@v3
      with:
        name: windows-build
        path: dist/MarkLex-Windows-x86_64.zip

  build-macos:
    runs-on: macos-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Setup Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PyQt6==6.8.0 PyQt6-sip==13.8.0
        pip install pandas numpy gensim nltk openpyxl scikit-learn scipy requests tqdm GitPython
        pip install PyInstaller==6.11.1
        
    - name: Build macOS app
      run: |
        pyinstaller MarkLex.spec
        cd dist && zip -r MarkLex-macOS-x86_64.zip MarkLex.app/
        
    - name: Upload macOS build
      uses: actions/upload-artifact@v3
      with:
        name: macos-build
        path: dist/MarkLex-macOS-x86_64.zip

  build-macos-arm:
    runs-on: macos-14  # Apple Silicon runner
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Setup Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PyQt6==6.8.0 PyQt6-sip==13.8.0
        pip install pandas numpy gensim nltk openpyxl scikit-learn scipy requests tqdm GitPython
        pip install PyInstaller==6.11.1
        
    - name: Build macOS ARM app
      run: |
        pyinstaller MarkLex.spec
        cd dist && zip -r MarkLex-macOS-arm64.zip MarkLex.app/
        
    - name: Upload macOS ARM build
      uses: actions/upload-artifact@v3
      with:
        name: macos-arm-build
        path: dist/MarkLex-macOS-arm64.zip

  create-release:
    needs: [build-linux, build-windows, build-macos, build-macos-arm]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./builds
        
    - name: Prepare release files
      run: |
        mkdir release-files
        find ./builds -name "*.tar.gz" -o -name "*.zip" | xargs -I {} cp {} release-files/
        ls -la release-files/
        
        # Create checksums
        cd release-files
        for file in *; do
          if [[ -f "$file" ]]; then
            sha256sum "$file" >> checksums.txt
          fi
        done
        cd ..
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.version }}
        name: MarkLex Desktop ${{ github.event.inputs.version }}
        body: |
          # MarkLex Desktop ${{ github.event.inputs.version }}
          
          ## Professional Marketing Lexicon Creation & Text Analysis
          
          ### Download
          
          - **Linux**: MarkLex-Linux-x86_64.tar.gz
          - **Windows**: MarkLex-Windows-x86_64.zip
          - **macOS Intel**: MarkLex-macOS-x86_64.zip
          - **macOS Apple Silicon**: MarkLex-macOS-arm64.zip
          
          ### Installation
          
          #### Linux
          ```bash
          tar -xzf MarkLex-Linux-x86_64.tar.gz
          ./main
          ```
          
          #### Windows
          1. Extract ZIP file
          2. Run `main.exe`
          
          #### macOS
          1. Extract ZIP file
          2. Open `MarkLex.app`
          3. If blocked, right-click and select "Open"
          
          ### Verification
          Use `checksums.txt` to verify file integrity.
          
          Built automatically with GitHub Actions.
        files: release-files/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}